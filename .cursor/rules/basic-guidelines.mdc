---
description:
globs:
alwaysApply: true
---

## Project: Boompath Bash

A 3D mobile game developed in Unity 6 where units follow player-drawn paths to attack enemy bases.

### Technical Stack

- Unity 6 (macOS/Apple Silicon)
- C# targeting iOS/Android/Desktop

## Developer Background

- Assume user is new to Unity and C# but has a strong programming background.
- Provide clear, beginner-friendly explanations for Unity-specific concepts.
- Assume user understands general programming concepts but need guidance on Unity-specific patterns, C# syntax, and best practices for mobile game development with Unity.

## Coding Guidelines

- Use C# with Unity 6 best practices, game development best practices for small projects
- Minimize garbage collection (avoid frequent `new` allocations)
- Name variables and methods descriptively
- Follow C# naming conventions: `PascalCase` for public members, `camelCase` for private fields
- Avoid adding comments that merely restate what the code clearly shows. Focus comments on explaining the 'why' behind non-obvious logic, not the 'what'.

### Architecture Guidelines

- Prefer component-based design (MonoBehaviours / NetworkBehaviours)
- State management for game modes (PathDrawing etc.)
- Mobile-optimized rendering and physics
- **Single Responsibility Principle (SRP):** Each class, including `MonoBehaviour` components, should have a single, well-defined responsibility. Avoid adding logic to a class that manages interactions or states external to its primary function. Aim for high cohesion within classes and low coupling between them.
- **Instance vs Manager Separation:** Instance classes (e.g., `Player`, `Unit`) should only manage their own state and data. Never make them responsible for finding, counting, or coordinating other instances. Use Manager classes (e.g., `PlayerSpawnManager`, `GameManager`) for coordination and cross-instance logic.

## Additional Guidelines

- Keep existing comments when possible, especially the TODO comments.
- **Stay task-focused:** Only remove TODO comments when your changes directly complete them. Update rather than remove if only partially addressed. Avoid unrelated cleanup during focused changes.

## Unity API Guidelines

- Use `Object.FindFirstObjectByType<T>()` instead of deprecated `Object.FindObjectOfType<T>()` for finding scene objects

## Installed UGS/Netcode Package Versions (from manifest.json)

- `com.unity.services.multiplayer`: `1.1.3` (Unified UGS: Auth, Lobby, Relay)
- `com.unity.netcode.gameobjects`: `2.3.2`
- `com.unity.multiplayer.tools`: `2.2.3`
- `com.unity.inputsystem`: `1.14.0`
- `com.unity.transport`: `2.5.1` Implicitly managed by `com.unity.netcode.gameobjects`. Provides `UnityTransport` and `RelayServerData`.

### UGS/Netcode Unified Services Guidelines

- **Prioritize Unified Package**: Give precedence to APIs and functionalities from `com.unity.services.multiplayer` for features like authentication, lobby, and relay.
- **Contextualize Older Examples**: Critically assess older code examples or documentation referring to separate UGS packages (e.g., standalone Auth, Lobby, Relay). Determine if functionality is now accessed via the unified `com.unity.services.multiplayer` package.
- **Verify API Compatibility**: Ensure code suggestions align with the capabilities, namespaces, and unified approach of the installed `com.unity.services.multiplayer@1.1.3` package.
- **Complement Specific Notes**: View these general guidelines as complementary to the "API Usage Notes Based on Versions" (e.g., `AllocationUtils.ToRelayServerData()`).
