---
description: 
globs: 
alwaysApply: true
---
## Project: Boompath Bash
A 3D mobile game developed in Unity 6 where units follow player-drawn paths to attack enemy bases.

### Technical Stack
- Unity 6 (macOS/Apple Silicon)
- C# targeting iOS/Android/Desktop

## Developer Background
- Assume user is new to Unity and C# but has a strong programming background.
- Provide clear, beginner-friendly explanations for Unity-specific concepts.
- Assume user understands general programming concepts but need guidance on Unity-specific patterns, C# syntax, and best practices for mobile game development with Unity.

## Coding Guidelines
- Use C# with Unity 6 best practices, game development best practices for small projects
- Minimize garbage collection (avoid frequent `new` allocations)
- Name variables and methods descriptively
- Follow C# naming conventions: `PascalCase` for public members, `camelCase` for private fields
- Avoid adding comments that merely restate what the code clearly shows. Focus comments on explaining the 'why' behind non-obvious logic, not the 'what'.

### Architecture Guidelines
- Prefer component-based design (MonoBehaviours / NetworkBehaviours)
- State management for game modes (PathDrawing etc.)
- Mobile-optimized rendering and physics
- **Single Responsibility Principle (SRP):** Each class, including `MonoBehaviour` components, should have a single, well-defined responsibility. Avoid adding logic to a class that manages interactions or states external to its primary function. Aim for high cohesion within classes and low coupling between them.

## Additional Guidelines
- Keep existing comments when possible, especially the TODO comments.

## Unity API Guidelines
- Use `Object.FindFirstObjectByType<T>()` instead of deprecated `Object.FindObjectOfType<T>()` for finding scene objects

